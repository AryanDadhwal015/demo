#!/bin/bash

# Define thresholds
CPU_THRESHOLD=80
MEMORY_THRESHOLD=80
DISK_THRESHOLD=80

# Log file
LOGFILE="/var/log/system_health.log"

# Function to check CPU usage
check_cpu() {
    CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    if (( $(echo "$CPU_USAGE > $CPU_THRESHOLD" | bc -l) )); then
        echo "CPU usage is high: ${CPU_USAGE}%" >> $LOGFILE
    fi
}

# Function to check memory usage
check_memory() {
    MEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
    if (( $(echo "$MEMORY_USAGE > $MEMORY_THRESHOLD" | bc -l) )); then
        echo "Memory usage is high: ${MEMORY_USAGE}%" >> $LOGFILE
    fi
}

# Function to check disk space
check_disk() {
    DISK_USAGE=$(df / | grep / | awk '{ print $5 }' | sed 's/%//g')
    if [ "$DISK_USAGE" -gt "$DISK_THRESHOLD" ]; then
        echo "Disk space usage is high: ${DISK_USAGE}%" >> $LOGFILE
    fi
}

# Function to check running processes (example: check for specific process)
check_process() {
    PROCESS_NAME="your-process-name"
    if pgrep -x "$PROCESS_NAME" > /dev/null; then
        echo "$PROCESS_NAME is running" >> $LOGFILE
    else
        echo "$PROCESS_NAME is not running" >> $LOGFILE
    fi
}
Health Check 
import requests
import logging
from datetime import datetime

# Configuration
APP_URL = "http://your-application-url"
LOGFILE = "app_health.log"
TIMEOUT = 10  # seconds

# Setup logging
logging.basicConfig(filename=LOGFILE, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def check_application_health(url):
    try:
        response = requests.get(url, timeout=TIMEOUT)
        if response.status_code == 200:
            logging.info(f"The application at {url} is UP")
        else:
            logging.warning(f"The application at {url} returned status code: {response.status_code}")
    except requests.RequestException as e:
        logging.error(f"Error checking the application: {e}")

if __name__ == "__main__":
    check_application_health(APP_URL)

